一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
问总共有多少条不同的路径？


例如，上图是一个7 x 3 的网格。有多少可能的路径？

说明：m 和 n 的值均不超过 100。

示例 1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右


示例 2:
输入: m = 7, n = 3
输出: 28
--------------------------------------
这是一道典型的动态规划问题，使用一个二维数组ans记忆到达每一点可行的走法总数。
首先将左边界点和上边界点初始化为1
因为机器人起始与（0，0），左边界点和上边界点的走法只有1种
接下来的每一点（x,y），可以由（x-1，y）向右走或是（x,y-1）向下走来到达
因此在（x,y）这一点可到达的方法有ans[x-1][y]+ans[x][y-1]种
到达终点的方法则是ans最后一个点的数据


class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m == 0 || n == 0)return 0;
        
        vector<vector<int>> path(m,vector<int>(n,0));
        for(int i = 0;i < m ;i++)
            path[i][0] = 1;
        for(int i = 0;i < n ;i++)
            path[0][i] = 1;
        
        for(int i = 1;i<m;i++){
            for(int j = 1;j<n;j++){
                path[i][j] = path[i-1][j] + path[i][j-1];
            }
        }
        
        return path[m-1][n-1];
    }
};